// <auto-generated />
using System;
using BDInvoiceMatchingSystem.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BDInvoiceMatchingSystem.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301033048_AddedUploadErrorColToPriceRebate")]
    partial class AddedUploadErrorColToPriceRebate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.Customer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1023)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("IX_Customer_CustomerName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.CustomerApproximateMapping", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApproximateValue")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerApproximateMappings");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.DocumentFromCashew", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<byte[]>("CSVFile")
                        .HasColumnType("longblob");

                    b.Property<string>("CSVFilename")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("VARCHAR(1023)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentClass")
                        .HasColumnType("int");

                    b.Property<int>("DocumentCreatedFrom")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("PDFFile")
                        .HasColumnType("longblob");

                    b.Property<string>("PDFFilename")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("CSVFilename")
                        .HasDatabaseName("IX_DocumentFromCashew_CSVFilename");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("IX_DocumentFromCashew_CustomerCode");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_DocumentFromCashew_CustomerName");

                    b.HasIndex("DeliveryDate")
                        .HasDatabaseName("IX_DocumentFromCashew_DeliveryDate");

                    b.HasIndex("DocumentClass")
                        .HasDatabaseName("IX_DocumentFromCashew_DocumentClass");

                    b.HasIndex("DocumentCreatedFrom")
                        .HasDatabaseName("IX_DocumentFromCashew_DocumentCreatedFrom");

                    b.HasIndex("DocumentDate")
                        .HasDatabaseName("IX_DocumentFromCashew_DocumentDate");

                    b.HasIndex("DocumentNo")
                        .HasDatabaseName("IX_DocumentFromCashew_DocumentNo");

                    b.HasIndex("UploadedDateTime")
                        .HasDatabaseName("IX_DocumentFromCashew_UploadedDateTime");

                    b.ToTable("DocumentsFromCashew");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.DocumentFromCashewItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<long>("DocumentFromCashewID")
                        .HasColumnType("bigint");

                    b.Property<string>("LotNo")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("Matched")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MatchingID")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DocumentFromCashewID");

                    b.HasIndex("LotNo")
                        .HasDatabaseName("IX_DocumentFromCashewItem_LotNo");

                    b.HasIndex("MatchingID");

                    b.HasIndex("StockCode")
                        .HasDatabaseName("IX_DocumentFromCashewItem_StockCode");

                    b.ToTable("DocumentFromCashewItems");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.FileSource", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerAddressColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("CustomerCodeColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("CustomerNameColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("DeliveryDateColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("DescriptionColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int>("DocumentClass")
                        .HasColumnType("int");

                    b.Property<string>("DocumentDateColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("DocumentNoColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("FilenameColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool>("FirstRowIsHeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1023)");

                    b.Property<int>("IntervalInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("LotNoColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("NextCaptureDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QuantityColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("StockCodeColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("SubtotalColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("UnitOfMeasureColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("UnitPriceColName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("ID");

                    b.ToTable("FileSources");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.MatchingViewModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Matchings");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebate", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentUploadRow")
                        .HasColumnType("int");

                    b.Property<byte[]>("ExcelFile")
                        .HasColumnType("longblob");

                    b.Property<string>("ExcelFilename")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Filename")
                        .HasColumnType("longtext");

                    b.Property<int>("TotalUploadRow")
                        .HasColumnType("int");

                    b.Property<string>("UploadError")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("ExcelFilename")
                        .HasDatabaseName("IX_PriceRebate_ExcelFilename");

                    b.HasIndex("UploadedDateTime")
                        .HasDatabaseName("IX_PriceRebate_UploadedDateTime");

                    b.ToTable("PriceRebates");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebateItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("Matched")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MatchingID")
                        .HasColumnType("bigint");

                    b.Property<long>("PriceRebateID")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("SubtotalInHKD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubtotalInUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("MatchingID");

                    b.HasIndex("PriceRebateID")
                        .HasDatabaseName("IX_PriceRebateItem_PriceRebateID");

                    b.ToTable("PriceRebateItems");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebateSetting", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("DocumentNoHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("QuantityHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("StockCodeHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("SubtotalInUSDHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("UnitPriceHeaderName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("ID");

                    b.ToTable("PriceRebateSetting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.CustomerApproximateMapping", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.Customer", "Customer")
                        .WithMany("CustomerApproximateMappings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.DocumentFromCashewItem", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.DocumentFromCashew", "DocumentFromCashew")
                        .WithMany("DocumentFromCashewItems")
                        .HasForeignKey("DocumentFromCashewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.MatchingViewModel", "Matching")
                        .WithMany("DocumentFromCashewItems")
                        .HasForeignKey("MatchingID");

                    b.Navigation("DocumentFromCashew");

                    b.Navigation("Matching");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebateItem", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.MatchingViewModel", "Matching")
                        .WithMany("PriceRebateItems")
                        .HasForeignKey("MatchingID");

                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebate", "PriceRebate")
                        .WithMany("PriceRebateItems")
                        .HasForeignKey("PriceRebateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matching");

                    b.Navigation("PriceRebate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BDInvoiceMatchingSystem.WebAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.Customer", b =>
                {
                    b.Navigation("CustomerApproximateMappings");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.DocumentFromCashew", b =>
                {
                    b.Navigation("DocumentFromCashewItems");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.MatchingViewModel", b =>
                {
                    b.Navigation("DocumentFromCashewItems");

                    b.Navigation("PriceRebateItems");
                });

            modelBuilder.Entity("BDInvoiceMatchingSystem.WebAPI.Models.PriceRebate", b =>
                {
                    b.Navigation("PriceRebateItems");
                });
#pragma warning restore 612, 618
        }
    }
}
